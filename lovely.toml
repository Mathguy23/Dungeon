[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.P_LOCKED = {}'''
position = 'after'
payload = '''self.P_ATTACKS = {
    blank = {order = 1, key = 'blank', atlas = 'dng_attacks', name = "Blank", pos = {x=0,y=0}, set = "BlindEffect", effect = "", config = {},  unlocked = true, discovered = true},
    debuff_1 = {order = 2, key = 'debuff_1', atlas = 'dng_attacks', name = "Debuff I", pos = {x=1,y=0}, set = "BlindEffect", effect = "", config = {odds = 8},  unlocked = true, discovered = true},
    debuff_2 = {order = 3, key = 'debuff_2', atlas = 'dng_attacks', name = "Debuff II", pos = {x=1,y=0}, set = "BlindEffect", effect = "", config = {odds = 5},  unlocked = true, discovered = true},
    raise_1 = {order = 4, key = 'raise_1', atlas = 'dng_attacks', name = "Raise I", pos = {x=4,y=0}, set = "BlindEffect", effect = "", config = {size = 1.2},  unlocked = true, discovered = true},
    raise_2 = {order = 5, key = 'raise_2', atlas = 'dng_attacks', name = "Raise II", pos = {x=4,y=0}, set = "BlindEffect", effect = "", config = {size = 1.5},  unlocked = true, discovered = true},
    hide_1 = {order = 6, key = 'hide_1', atlas = 'dng_attacks', name = "Hide I", pos = {x=2,y=0}, set = "BlindEffect", effect = "", config = {cards = 3},  unlocked = true, discovered = true},
    hide_2 = {order = 7, key = 'hide_2', atlas = 'dng_attacks', name = "Hide II", pos = {x=2,y=0}, set = "BlindEffect", effect = "", config = {cards = 6},  unlocked = true, discovered = true},
}
self.BL_EFFECT_PATTERNS = {
    bl_small = {
        debuff_1 = {weight = 1},
        hide_1 = {weight = 1},
    },
    bl_big = {
        debuff_1 = {weight = 1},
        hide_1 = {weight = 1},
        raise_1 = {weight = 2},
    },
    bl_boss = {
        debuff_2 = {weight = 1},
        hide_1 = {weight = 1},
        hide_2 = {weight = 0.5},
        raise_1 = {weight = 2.5},
    }
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Joker' then'''
position = 'before'
payload = '''elseif _c.set == 'BlindEffect' then
    if (_c.name == "Debuff I") or (_c.name == "Debuff II") then
        loc_vars = {G.GAME.probabilities.normal, cfg.odds}
    elseif (_c.name == "Raise I") or (_c.name == "Raise II") then
        loc_vars = {cfg.size}
    elseif (_c.name == "Hide I") or (_c.name == "Hide II") then
        loc_vars = {card.ability.cards}
    end
    localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.blind:set_blind(G.GAME.round_resets.blind)'''
position = 'after'
payload = '''if G.GAME.modifiers.dungeon then
    local amount = 3
    if (G.GAME.blind_on_deck == "Small") then amount = 1 end
    if (G.GAME.blind_on_deck == "Big") then amount = 2 end
    for i = 1, amount do add_attack("blank") end
    for i = 1, amount do add_dungeon_attack() end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.RESET_JIGGLES = true'''
position = 'after'
payload = '''if G.GAME.modifiers.dungeon then
    local area = G.HUD_blind:get_UIE_by_ID("blind_attacks").children[1].children[1].config.object
    if G.GAME.blind_attacks then
        for i = #G.GAME.blind_attacks, 1, -1 do
            remove_attack(i)
        end
    end
    for i = #area.cards, 1, -1 do
        area.cards[i]:remove()
    end
    G.GAME.blind_attacks = {}
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''v.ability.discarded = nil'''
position = 'after'
payload = '''if v.debuff then
    v.ability.temp_debuff = nil
    v:set_debuff()
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.HUD:recalculate()'''
position = 'after'
payload = '''if G.GAME.modifiers.dungeon then
    local area = G.HUD_blind:get_UIE_by_ID("blind_attacks").children[1].children[1].config.object
    if area and G.GAME.blind_attacks then
        for i = 1, #G.GAME.blind_attacks do
            local key = G.GAME.blind_attacks[i]
            local attack = add_attack('blank', i)
            attack:set_ability(G.P_ATTACKS[key])
            G.GAME.blind_attacks[i] = key
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.play_cards_from_highlighted = function(e)'''
position = 'after'
payload = '''   played_hand = true'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.current_round.hands_played == 0 and'''
position = 'before'
payload = '''if played_hand and G.GAME.modifiers.dungeon then
   add_dungeon_attack()
end
played_hand = nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''function new_round()'''
position = 'after'
payload = '''   played_hand = nil
    G.GAME.blind_attacks = {}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)'''
position = 'before'
payload = '''if not G.GAME.modifiers["ante_hand_discard_reset"] or boss_ded then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = 'after'
payload = '''elseif G.GAME.current_round.hands_left and (G.GAME.current_round.hands_left <= 0) then
    G.GAME.current_round.hands_left = 1
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)'''
position = 'before'
payload = '''if not G.GAME.modifiers["ante_hand_discard_reset"] then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = 'after'
payload = '''end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:debuff_card(card, from_blind)'''
position = 'after'
payload = '''if card and card.ability and (card.ability.set == "BlindEffect") then return end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.deck:hard_set_T()'''
position = 'after'
payload = '''local boss_ded = nil
if (G.GAME.round_resets.blind_states.Boss == 'Defeated') then
    boss_ded = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:stay_flipped(area, card)'''
position = 'after'
payload = '''   local _area = G.HUD_blind:get_UIE_by_ID("blind_attacks")
    if _area and (area == G.hand) and G.GAME.modifiers.dungeon then
        _area = _area.children[1].children[1].config.object
        for i = 1, #_area.cards do
            if (_area.cards[i].ability.name == "Hide I") or (_area.cards[i].ability.name == "Hide II") then
                _area.cards[i].ability.cards = (_area.cards[i].ability.cards or 3) - 1
                if _area.cards[i].ability.cards == 0 then
                    remove_attack(i)
                end
                return true
            end
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''local nosave_shop = nil'''
position = 'after'
payload = '''local old_shop_exists = shop_exists
if G.GAME.modifiers.dungeon then
    shop_exists = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.CONTROLLER:snap_to({node = G.shop:get_UIE_by_ID('next_round_button')})'''
position = 'before'
payload = '''shop_exists = old_shop_exists
if not shop_exists and G.GAME.modifiers.dungeon then
    if G.load_shop_jokers then 
        nosave_shop = true
        G.shop_jokers:load(G.load_shop_jokers)
        for k, v in ipairs(G.shop_jokers.cards) do
            create_shop_card_ui(v)
            if v.ability.consumeable then v:start_materialize() end
            for _kk, vvv in ipairs(G.GAME.tags) do
                if vvv:apply_to_run({type = 'store_joker_modify', card = v}) then break end
            end
        end
        G.load_shop_jokers = nil
    elseif not G.GAME.first_shop_buffoon and not G.GAME.banned_keys['p_buffoon_normal_1'] then
        G.GAME.first_shop_buffoon = true
        local card = Card(G.shop_jokers.T.x + G.shop_jokers.T.w/2,
        G.shop_jokers.T.y, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS['p_buffoon_normal_'..(math.random(1, 2))], {bypass_discovery_center = true, bypass_discovery_ui = true})
        create_shop_card_ui(card, 'Booster', G.shop_jokers)
        card.ability.booster_pos = #G.shop_jokers.cards + 1
        card:start_materialize()
        G.shop_jokers:emplace(card)
        card.ability.couponed = true
        card:set_cost()
        create_shop_card_ui(card, card.ability.set, G.shop_jokers)
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''function G.UIDEF.shop()'''
position = 'after'
payload = '''   if G.GAME.modifiers.dungeon then
        return G.UIDEF.loot_shop()
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''ease_hands_played(-self.hands_sub)'''
position = 'after'
payload = '''G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = function()
        if G.GAME.current_round.hands_left < 1 then
            G.GAME.current_round.hands_left = 1
        end
        return true
    end
}))'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''ease_discard(-self.discards_sub)'''
position = 'after'
payload = '''G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = function()
        if G.GAME.current_round.discards_left < 0 then
            G.GAME.current_round.discards_left = 1
        end
        return true
    end
}))'''
match_indent = true