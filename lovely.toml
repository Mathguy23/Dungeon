[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.P_LOCKED = {}'''
position = 'after'
payload = '''self.P_ATTACKS = {
    blank = {order = 1, key = 'blank', atlas = 'dng_attacks', name = "Blank", pos = {x=0,y=0}, set = "BlindEffect", effect = "", config = {},  unlocked = true, discovered = true},
    debuff_1 = {order = 2, key = 'debuff_1', atlas = 'dng_attacks', name = "Debuff I", pos = {x=1,y=0}, set = "BlindEffect", effect = "", config = {odds = 8},  unlocked = true, discovered = true},
    debuff_2 = {order = 3, key = 'debuff_2', atlas = 'dng_attacks', name = "Debuff II", pos = {x=5,y=0}, set = "BlindEffect", effect = "", config = {odds = 5},  unlocked = true, discovered = true},
    raise_1 = {order = 4, key = 'raise_1', atlas = 'dng_attacks', name = "Raise I", pos = {x=4,y=0}, set = "BlindEffect", effect = "", config = {size = 1.2},  unlocked = true, discovered = true},
    raise_2 = {order = 5, key = 'raise_2', atlas = 'dng_attacks', name = "Raise II", pos = {x=1,y=1}, set = "BlindEffect", effect = "", config = {size = 1.5},  unlocked = true, discovered = true},
    hide_1 = {order = 6, key = 'hide_1', atlas = 'dng_attacks', name = "Hide I", pos = {x=2,y=0}, set = "BlindEffect", effect = "", config = {cards = 1},  unlocked = true, discovered = true},
    hide_2 = {order = 7, key = 'hide_2', atlas = 'dng_attacks', name = "Hide II", pos = {x=6,y=0}, set = "BlindEffect", effect = "", config = {cards = 3},  unlocked = true, discovered = true},
    ring_1 = {order = 8, key = 'ring_1', atlas = 'dng_attacks', name = "Ring I", pos = {x=3,y=0}, set = "BlindEffect", effect = "", config = {cards = 1},  unlocked = true, discovered = true},
    ring_2 = {order = 9, key = 'ring_2', atlas = 'dng_attacks', name = "Ring II", pos = {x=0,y=1}, set = "BlindEffect", effect = "", config = {cards = 2},  unlocked = true, discovered = true},
}
self.BL_EFFECT_PATTERNS = {
    bl_small = {
        debuff_1 = {weight = 1},
        hide_1 = {weight = 1},
    },
    bl_big = {
        debuff_1 = {weight = 1},
        hide_1 = {weight = 1},
        raise_1 = {weight = 2},
    },
    bl_boss = {
        debuff_2 = {weight = 1},
        hide_1 = {weight = 1},
        hide_2 = {weight = 0.5},
        raise_1 = {weight = 2.5},
    },
    bl_dng_scarlet_spider = {
        hide_1 = {weight = 1.2},
        raise_2 = {weight = 1},
        ring_1 = {weight = 1},
        ring_2 = {weight = 0.5},
    }
}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Joker' then'''
position = 'before'
payload = '''elseif _c.set == 'BlindEffect' then
    if (_c.name == "Debuff I") or (_c.name == "Debuff II") then
        loc_vars = {G.GAME.probabilities.normal, cfg.odds}
    elseif (_c.name == "Raise I") or (_c.name == "Raise II") then
        loc_vars = {cfg.size}
    elseif (_c.name == "Hide I") or (_c.name == "Hide II") then
        loc_vars = {card.ability.cards}
    elseif (_c.name == "Ring I") or (_c.name == "Ring II") then
        loc_vars = {card.ability.cards}
    end
    localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.blind:set_blind(G.GAME.round_resets.blind)'''
position = 'after'
payload = '''if G.GAME.modifiers.dungeon then
    local amount = 3
    if (G.GAME.blind_on_deck == "Small") then amount = 1 end
    if (G.GAME.blind_on_deck == "Big") then amount = 2 end
    for i = 1, amount do add_attack("blank") end
    for i = 1, amount do add_dungeon_attack() end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if game_over then'''
position = 'before'
payload = '''if G.GAME.modifiers.dungeon and not game_over then
    local area = G.HUD_blind:get_UIE_by_ID("blind_attacks").children[1].children[1].config.object
    if G.GAME.blind_attacks then
        for i = #G.GAME.blind_attacks, 1, -1 do
            remove_attack(i)
        end
    end
    for i = #area.cards, 1, -1 do
        area.cards[i]:remove()
    end
    G.GAME.blind_attacks = {}
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''v.ability.discarded = nil'''
position = 'after'
payload = '''if v.debuff then
    v.ability.temp_debuff = nil
    v:set_debuff()
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.HUD:recalculate()'''
position = 'after'
payload = '''if G.GAME.modifiers.dungeon then
    local area = G.HUD_blind:get_UIE_by_ID("blind_attacks").children[1].children[1].config.object
    if area and G.GAME.blind_attacks then
        for i = 1, #G.GAME.blind_attacks do
            local key = G.GAME.blind_attacks[i]
            local attack = add_attack('blank', i)
            attack:set_ability(G.P_ATTACKS[key])
            G.GAME.blind_attacks[i] = key
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.play_cards_from_highlighted = function(e)'''
position = 'after'
payload = '''   played_hand = true'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.current_round.hands_played == 0 and'''
position = 'before'
payload = '''if played_hand and G.GAME.modifiers.dungeon then
    add_dungeon_attack()
end
played_hand = nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.GAME.blind:drawn_to_hand()'''
position = 'before'
payload = '''
if G.GAME.modifiers.dungeon then
    for i, j in ipairs(G.GAME.blind_attacks) do
        calculate_blind_effect(j, {drawn_to_hand = true, index = i})
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''function new_round()'''
position = 'after'
payload = '''   played_hand = nil
    G.GAME.blind_attacks = {}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)'''
position = 'before'
payload = '''if not G.GAME.modifiers["ante_hand_discard_reset"] or boss_ded then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = 'after'
payload = '''elseif G.GAME.current_round.hands_left and (G.GAME.current_round.hands_left <= 0) then
    G.GAME.current_round.hands_left = 1
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)'''
position = 'before'
payload = '''if not G.GAME.modifiers["ante_hand_discard_reset"] then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = 'after'
payload = '''end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:debuff_card(card, from_blind)'''
position = 'after'
payload = '''if card and card.ability and (card.ability.set == "BlindEffect") then return end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.deck:hard_set_T()'''
position = 'after'
payload = '''local boss_ded = nil
if (G.GAME.round_resets.blind_states.Boss == 'Defeated') then
    boss_ded = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:stay_flipped(area, card)'''
position = 'after'
payload = '''   local _area = G.HUD_blind:get_UIE_by_ID("blind_attacks")
    if _area and (area == G.hand) and G.GAME.modifiers.dungeon then
        _area = _area.children[1].children[1].config.object
        for i = 1, #_area.cards do
            if (_area.cards[i].ability.name == "Hide I") or (_area.cards[i].ability.name == "Hide II") then
                _area.cards[i].ability.cards = (_area.cards[i].ability.cards or 3) - 1
                if _area.cards[i].ability.cards == 0 then
                    remove_attack(i)
                end
                return true
            end
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''local nosave_shop = nil'''
position = 'after'
payload = '''local old_shop_exists = shop_exists
if G.GAME.modifiers.dungeon then
    shop_exists = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.CONTROLLER:snap_to({node = G.shop:get_UIE_by_ID('next_round_button')})'''
position = 'before'
payload = '''shop_exists = old_shop_exists
if not shop_exists and G.GAME.modifiers.dungeon and G.shop_jokers then
    if G.load_shop_jokers then 
        nosave_shop = true
        G.shop_jokers:load(G.load_shop_jokers)
        for k, v in ipairs(G.shop_jokers.cards) do
            create_shop_card_ui(v)
            if v.ability.consumeable then v:start_materialize() end
            for _kk, vvv in ipairs(G.GAME.tags) do
                if vvv:apply_to_run({type = 'store_joker_modify', card = v}) then break end
            end
        end
        G.load_shop_jokers = nil
    elseif not G.GAME.first_shop_buffoon and not G.GAME.banned_keys['p_buffoon_normal_1'] then
        G.GAME.first_shop_buffoon = true
        local card = Card(G.shop_jokers.T.x + G.shop_jokers.T.w/2,
        G.shop_jokers.T.y, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS['p_buffoon_normal_'..(math.random(1, 2))], {bypass_discovery_center = true, bypass_discovery_ui = true})
        create_shop_card_ui(card, 'Booster', G.shop_jokers)
        card.ability.booster_pos = #G.shop_jokers.cards + 1
        card:start_materialize()
        G.shop_jokers:emplace(card)
        card.ability.couponed = true
        card:set_cost()
        create_shop_card_ui(card, card.ability.set, G.shop_jokers)
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''function G.UIDEF.shop()'''
position = 'after'
payload = '''   if G.GAME.memory then
        return G.UIDEF.memory()
    elseif G.GAME.modifiers.dungeon then
        return G.UIDEF.loot_shop()
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''ease_hands_played(-self.hands_sub)'''
position = 'after'
payload = '''G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = function()
        if G.GAME.current_round.hands_left < 1 then
            G.GAME.current_round.hands_left = 1
        end
        return true
    end
}))'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''ease_discard(-self.discards_sub)'''
position = 'after'
payload = '''G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = function()
        if G.GAME.current_round.discards_left < 0 then
            G.GAME.current_round.discards_left = 1
        end
        return true
    end
}))'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''function get_new_boss()'''
position = 'after'
payload = '''   if G.GAME.challenge == 'c_dungeon' then
        if (G.GAME.round_resets.ante == 8) then
            return 'bl_dng_scarlet_spider'
        elseif (G.GAME.round_resets.ante == 4) then
            return 'bl_dng_string'
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''if v.ability.forced_selection and not self.highlighted[1] then'''
position = 'before'
payload = '''if v.ability.forced_selection and self.highlighted[1] and not v.highlighted then
    self:add_to_highlighted(v)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.round_resets.blind_states.Small = 'Defeated''''
position = 'after'
payload = '''                        elseif G.GAME.blind_on_deck == 'Dungeon' then
                            '''
match_indent = false

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''elseif self.name == "Big Blind" then'''
position = 'before'
payload = '''elseif self.name == "The Dealer" then
    return 'Dungeon'
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.skips = (G.GAME.skips or 0) + 1'''
position = 'after'
payload = '''if _tag and _tag.config.ref_table then
    local valid = false
    if _tag.config.ref_table.key == 'tag_dng_blackjack' then
        valid = true
    elseif _tag.config.ref_table.key == 'tag_dng_memory' then
        valid = true
    end
    if valid then
        local skipped, skip_to = G.GAME.blind_on_deck or 'Small', 
        G.GAME.blind_on_deck == 'Small' and 'Big' or G.GAME.blind_on_deck == 'Big' and 'Boss' or 'Boss'
        G.GAME.round_resets.blind_states[skipped] = 'Skipped'
        G.GAME.round_resets.blind_states[skip_to] = 'Select'
        G.GAME.blind_on_deck = skip_to
        play_sound('generic1')
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
            delay(0.3)
            if SMODS.calculate_context then
                SMODS.calculate_context({skip_blind = true})
            else
                for i = 1, #G.jokers.cards do
                    G.jokers.cards[i]:calculate_joker({skip_blind = true})
                end
                save_run()
                for i = 1, #G.GAME.tags do
                    G.GAME.tags[i]:apply_to_run({type = 'immediate'})
                end
                for i = 1, #G.GAME.tags do
                    if G.GAME.tags[i]:apply_to_run({type = 'new_blind_choice'}) then break end
                end
            end
            if _tag.config.ref_table.key == 'tag_dng_blackjack' then
                dunegon_selection('bl_dng_dealer')
            elseif _tag.config.ref_table.key == 'tag_dng_memory' then
                if G.blind_select then 
                    G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object.pop_delay = 0
                    G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object:pop_out(5)
                    G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object.pop_delay = 0
                    G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object:pop_out(5) 
            
                    G.E_MANAGER:add_event(Event({
                    trigger = 'before', delay = 0.2,
                    func = function()
                        G.blind_prompt_box.alignment.offset.y = -10
                        G.blind_select.alignment.offset.y = 40
                        G.blind_select.alignment.offset.x = 0
                        return true
                    end}))
                    G.E_MANAGER:add_event(Event({
                    trigger = 'immediate',
                    func = function()
                        G.blind_select:remove()
                        G.blind_prompt_box:remove()
                        G.blind_select = nil
                        delay(0.2)
                        return true
                    end}))
                    G.E_MANAGER:add_event(Event({
                    trigger = 'immediate',
                    func = function()
                        G.RESET_JIGGLES = nil
                        delay(0.4)
                        G.E_MANAGER:add_event(Event({
                        trigger = 'immediate',
                        func = function()
                            
                            delay(0.4)

                            G.E_MANAGER:add_event(Event({
                                trigger = 'immediate',
                                func = function()
                                    G.GAME.memory = true
                                    G.STATE = G.STATES.SHOP
                                    G.STATE_COMPLETE = false
                                    return true
                                end
                            }))
                            return true
                            end
                        }))
                        return true
                        end
                    }))
                end
            end
            return true
            end
        }))
        return
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''config.saved and'''
position = 'after'
payload = '''(G and G.GAME and G.GAME.blind and G.GAME.blind.config and G.GAME.blind.config.blind and G.GAME.blind.config.blind.name == "The Dealer") and {n=G.UIT.C, config={padding = 0.05, align = 'cm'}, nodes={
    {n=G.UIT.R, config={align = 'cm'}, nodes={
        {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_blackjack_lost')..' '}, colours = {G.C.RED}, shadow = true, pop_in = 0, scale = 0.5*scale, silent = true})}}
    }}
}} or config.saved and'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:highlight(is_higlighted)'''
position = 'after'
payload = '''   if G.memory_row_1 and ((self.area == G.memory_row_1) or (self.area == G.memory_row_2)) then
        if (self.facing == 'back') and G.GAME.currently_choosing and G.GAME.memory_cards and not self.debuff then
            self:flip()
            table.insert(G.GAME.memory_cards, self)
            if #G.GAME.memory_cards == 2 then
                local match = nil
                if G.GAME.memory_cards[1].config.center.key == G.GAME.memory_cards[2].config.center.key then
                    play_area_status_text("Match")
                    match = G.GAME.memory_cards[1].config.center.key
                end
                local cards = G.GAME.memory_cards
                G.GAME.memory_cards = nil
                G.E_MANAGER:add_event(Event({
                    trigger = 'immediate',
                    func = function()
                        G.E_MANAGER:add_event(Event({
                            trigger = 'after',
                            delay = 3,
                            func = function()
                                if match then
                                    cards[1].ability.perma_debuff = true
                                    cards[2].ability.perma_debuff = true
                                    if cards[1].ability.consumeable and (G.consumeables.config.card_limit > #G.consumeables.cards) then
                                        local card = SMODS.create_card {key = match, area = G.consumeables}
                                        card:add_to_deck()
                                        G.consumeables:emplace(card)
                                    elseif cards[1].ability.set == "Joker" and (G.jokers.config.card_limit > #G.jokers.cards) then
                                        local card = SMODS.create_card {key = match, area = G.jokers}
                                        card:add_to_deck()
                                        G.jokers:emplace(card)
                                    elseif cards[1].ability.set == "Voucher" then
                                        local card = SMODS.create_card {key = match}
                                        G.FUNCS.use_card({config = {ref_table = card}})
                                    end
                                else
                                    cards[1]:flip()
                                    cards[2]:flip()
                                end
                                G.GAME.currently_choosing = nil
                                save_run()
                                return true
                            end}))
                        return true
                    end
                }))
            end
        end
        return
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.load_shop_vouchers = nil'''
position = 'after'
payload = '''G.load_memory_row_1 = nil
G.load_memory_row_2 = nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.CONTROLLER.locks.toggle_shop = true'''
position = 'after'
payload = '''G.GAME.memory = nil'''
match_indent = true